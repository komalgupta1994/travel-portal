name: Build and deploy code

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
    # PROJECT_ID: ${{ secrets.GKE_PROJECT }} # apt-diode-386016
    GKE_CLUSTER: gke-cluster    # TODO: update to cluster name
    GKE_REGION: asia-south1   # TODO: update to cluster zone
    USER_MANAGEMENT_IMAGE: kamligupta/user-management
    HOTEL_BOOKING_IMAGE: kamligupta/hotel-booking
    FLIGHT_BOOKING_IMAGE: kamligupta/flight-booking

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Dependencies and Run User Management Tests
        run: |
          cd online-travel-portal/user-management
          npm install
          npm run test
          exit_code=$?

          # Display a message based on the exit code
          if [ $exit_code -eq 0 ]; then
            echo "Tests passed successfully."
          else
            echo "Tests failed."
            exit $exit_code
          fi

  docker-image-push_job:
    needs: run-tests
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
        hash: ${{ steps.git_commit_hash.outputs.hash }}
    
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Get Git Commit Hash
      id: git_commit_hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build user management docker image
      run: docker build ./online-travel-portal/user-management --file ./online-travel-portal/user-management/Dockerfile --tag $USER_MANAGEMENT_IMAGE:${{ steps.git_commit_hash.outputs.hash }} --tag $USER_MANAGEMENT_IMAGE:latest
    - name: Push to docker hub
      run: |-
        docker push $USER_MANAGEMENT_IMAGE:${{ steps.git_commit_hash.outputs.hash }}
        docker push $USER_MANAGEMENT_IMAGE:latest

    - name: Build hotel booking docker image
      run: docker build ./online-travel-portal/hotel-booking --file ./online-travel-portal/hotel-booking/Dockerfile --tag $HOTEL_BOOKING_IMAGE:${{ steps.git_commit_hash.outputs.hash }} --tag $HOTEL_BOOKING_IMAGE:latest
    - name: Push to docker hub
      run: |-
        docker push $HOTEL_BOOKING_IMAGE:${{ steps.git_commit_hash.outputs.hash }}
        docker push $HOTEL_BOOKING_IMAGE:latest

    - name: Build flight booking docker image
      run: docker build ./online-travel-portal/flight-booking --file ./online-travel-portal/flight-booking/Dockerfile --tag $FLIGHT_BOOKING_IMAGE:${{ steps.git_commit_hash.outputs.hash }} --tag $FLIGHT_BOOKING_IMAGE:latest
    - name: Push to docker hub
      run: |-
        docker push $FLIGHT_BOOKING_IMAGE:${{ steps.git_commit_hash.outputs.hash }}
        docker push $FLIGHT_BOOKING_IMAGE:latest

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: docker-image-push_job
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GKE_CREDENTIAL }}'

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_REGION }}

    # Set up kustomize
    # - name: Set up Kustomize
    #   working-directory: k8s_objects
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: online-travel-portal/k8s
      run: |-
        helm list
        # helm delete my-release
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm install my-release ingress-nginx/ingress-nginx
        kubectl delete -A ValidatingWebhookConfiguration my-release-ingress-nginx-admission
        # Apply all yaml files
        kubectl apply -f .
